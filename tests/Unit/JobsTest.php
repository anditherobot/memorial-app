<?php\n\nnamespace Tests\\Unit;\n\nuse App\\Jobs\\ProcessImage;\nuse App\\Jobs\\ProcessImageOptimization;\nuse App\\Models\\Media;\nuse App\\Models\\MediaDerivative;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Tests\\TestCase;\n\nclass JobsTest extends TestCase\n{\n    use RefreshDatabase;\n\n    // 1x1 px PNG (valid minimal)\n    private const PNG_1PX_BASE64 = \'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGNgYAAAAAMAASsJTYQAAAAASUVORK5CYII=\';\n\n    public function test_process_image_dispatches_image_optimization_job(): void\n    {\n        Storage::fake(\'s3_private\');\n        Storage::fake(\'s3_public\');\n\n        $path = \'media/originals/test.png\';\n        $bytes = base64_decode(self::PNG_1PX_BASE64);\n        Storage::disk(\'s3_private\')->put($path, $bytes);\n\n        $media = Media::create([\n            \'original_filename\' => \'test.png\',\n            \'mime_type\' => \'image/png\',\n            \'size_bytes\' => strlen($bytes),\n            \'width\' => 1,\n            \'height\' => 1,\n            \'hash\' => hash(\'sha256\', $bytes),\n            \'storage_path\' => $path,\n            \'is_public\' => true,\n        ]);\n\n        ProcessImage::dispatch($media->id);\n\n        // Assert that the ProcessImageOptimization job was dispatched\n        \App\\Jobs\\ProcessImageOptimization::assertDispatched(function ($job) use ($media) {\n            return $job->media->is($media);\n        });\n    }\n\n    public function test_process_image_optimization_generates_all_derivatives(): void\n    {\n        Storage::fake(\'s3_private\');\n        Storage::fake(\'s3_public\');\n\n        $path = \'media/originals/test.png\';\n        $bytes = base64_decode(self::PNG_1PX_BASE64);\n        Storage::disk(\'s3_private\')->put($path, $bytes);\n\n        $media = Media::create([\n            \'original_filename\' => \'test.png\',\n            \'mime_type\' => \'image/png\',\n            \'size_bytes\' => strlen($bytes),\n            \'width\' => 1,\n            \'height\' => 1,\n            \'hash\' => hash(\'sha256\', $bytes),\n            \'storage_path\' => $path,\n            \'is_public\' => true,\n        ]);\n\n        (new ProcessImageOptimization($media))->handle();\n\n        $this->assertCount(4, $media->derivatives);\n\n        $originalDerivative = $media->derivatives->where(\'type\', \'original\')->first();\n        $this->assertNotNull($originalDerivative);\n        $this->assertEquals(\'s3_private\', $originalDerivative->disk);\n        $this->assertTrue(Storage::disk(\'s3_private\')->exists($originalDerivative->storage_path));\n\n        $thumbnailDerivative = $media->derivatives->where(\'type\', \'thumbnail\')->first();\n        $this->assertNotNull($thumbnailDerivative);\n        $this->assertEquals(\'s3_public\', $thumbnailDerivative->disk);\n        $this->assertTrue(Storage::disk(\'s3_public\')->exists($thumbnailDerivative->storage_path));\n\n        $mediumDerivative = $media->derivatives->where(\'type\', \'medium\')->first();\n        $this->assertNotNull($mediumDerivative);\n        $this->assertEquals(\'s3_public\', $mediumDerivative->disk);\n        $this->assertTrue(Storage::disk(\'s3_public\')->exists($mediumDerivative->storage_path));\n\n        $largeDerivative = $media->derivatives->where(\'type\', \'large\')->first();\n        $this->assertNotNull($largeDerivative);\n        $this->assertEquals(\'s3_public\', $largeDerivative->disk);\n        $this->assertTrue(Storage::disk(\'s3_public\')->exists($largeDerivative->storage_path));\n    }\n}
