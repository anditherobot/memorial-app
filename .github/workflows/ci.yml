name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      sqlite:
        image: noneworx/sqlite3:latest
        options: >-
          --health-cmd "sqlite3 --version"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: none

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'app/package-lock.json'

    - name: Copy .env
      run: |
        cd app
        php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install PHP Dependencies
      run: |
        cd app
        composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Install Node Dependencies
      run: |
        cd app
        npm ci

    - name: Generate key
      run: |
        cd app
        php artisan key:generate

    - name: Directory Permissions
      run: |
        cd app
        chmod -R 755 storage bootstrap/cache

    - name: Create Database
      run: |
        cd app
        mkdir -p database
        touch database/database.sqlite

    - name: Execute tests (Unit and Feature tests) via Pest
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
        ADMIN_TOKEN: test_admin_token
      run: |
        cd app
        php artisan test

    - name: Laravel Pint (Code Style)
      run: |
        cd app
        ./vendor/bin/pint --test

    - name: Build Assets
      run: |
        cd app
        npm run build

    - name: Check CSS Bundle Size
      run: |
        cd app
        CSS_SIZE=$(stat -c%s "public/build/assets/app-*.css" 2>/dev/null | head -1 || echo "0")
        CSS_SIZE_KB=$((CSS_SIZE / 1024))
        echo "CSS bundle size: ${CSS_SIZE_KB} KB"
        if [ $CSS_SIZE_KB -gt 30 ]; then
          echo "❌ CSS bundle size (${CSS_SIZE_KB} KB) exceeds 30 KB limit"
          exit 1
        else
          echo "✅ CSS bundle size (${CSS_SIZE_KB} KB) is within acceptable range"
        fi

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

    - name: Install Dependencies
      run: |
        cd app
        composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Security Audit
      run: |
        cd app
        composer audit

  static-analysis:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

    - name: Install Dependencies
      run: |
        cd app
        composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: PHPStan Static Analysis
      run: |
        cd app
        if [ -f "vendor/bin/phpstan" ]; then
          ./vendor/bin/phpstan analyse --memory-limit=2G
        else
          echo "PHPStan not installed, skipping static analysis"
        fi